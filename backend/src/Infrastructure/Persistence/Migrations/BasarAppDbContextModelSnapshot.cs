// <auto-generated />
using System;
using BasarApp.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BasarApp.Infrastructure.Persistence.Migrations
{
    /// <summary>
    /// EF Core model snapshot: mevcut DbContext modelinin EF tarafından üretilmiş anlık görüntüsü.
    /// Kullanım: Migrations karşılaştırmalarında referans alınır; manuel düzenleme önerilmez.
    /// </summary>
    [DbContext(typeof(BasarAppDbContext))]
    partial class BasarAppDbContextModelSnapshot : ModelSnapshot
    {
        /// <summary>
        /// Model’in nasıl oluşturulacağını tanımlar (entity, kolon, index, constraint).
        /// EF migration’ları bu tanımı kullanarak farkları üretir.
        /// </summary>
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            // Model meta (EF sürümü / PostgreSQL kimlik uzunluğu)
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            // PostgreSQL PostGIS eklentisi + kimlik stratejisi
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            // Entity: Feature (features tablosu)
            modelBuilder.Entity("BasarApp.Domain.Entities.Feature", b =>
                {
                    // PK: id (identity)
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    // EnumType: int, default 0 (None)
                    b.Property<int>("EnumType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("enum_type");

                    // Geom: PostGIS geometry (NTS eşlemesi)
                    b.Property<Geometry>("Geom")
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    // Name: varchar(50), not null
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    // Uid: uuid, DB default gen_random_uuid(), unique index
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    // Primary Key
                    b.HasKey("Id");

                    // Unique index: ux_features_uid
                    b.HasIndex("Uid")
                        .IsUnique()
                        .HasDatabaseName("ux_features_uid");

                    // Tablo adı + check constraint:
                    // Kural: geometry POINT ise enum_type != 0; değilse enum_type = 0
                    b.ToTable("features", null, t =>
                        {
                            t.HasCheckConstraint("ck_features_point_enumtype", "(geometry IS NULL) OR ((GeometryType(geometry) = 'POINT' AND enum_type <> 0) OR (GeometryType(geometry) <> 'POINT' AND enum_type = 0))");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
